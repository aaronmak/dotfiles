fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

grelease() {
  PR=$(gh pr list | grep Release | awk '{print $1}')
  read "REPLY?Merging #${PR}... Are you sure? "
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    gh pr merge $PR --merge --delete-branch=false
    echo "#${PR} merged!"
  else
    echo "Did nothing."
  fi
}

# Creates a new virtualenv if python version is given,
# and always tries to activate the virtualenv based on
# the directory name
venv() {
  PYTHON_VERSION=$1
  VENV_NAME=$(basename $PWD | tr . -)
  VIRTUALENVS_DIR=${HOME}/.virtualenvs
  VIRTUALENV_PATH=${VIRTUALENVS_DIR}/${VENV_NAME}
  PYTHON_BIN=${ASDF_DIR}/installs/python/${PYTHON_VERSION}/bin/python
  if [ ! -z "$PYTHON_VERSION" ]; then
    if [ ! -f ${PYTHON_BIN} ]; then
      echo "Python version $PYTHON_VERSION is not installed."
      return 1
    fi
    if [ ! -d ${VIRTUALENV_PATH} ]; then
      echo "Creating virtualenv ${VENV_NAME}..."
      ${PYTHON_BIN} -m venv ${VIRTUALENV_PATH}
    fi
  fi
  source ${VIRTUALENV_PATH}/bin/activate
  echo "virtualenv activated: ${VENV_NAME}"
}

venv_remove() {
  VENV_NAME=$(basename $PWD | tr . -)
  rm -rf ${HOME}/.virtualenvs/${VENV_NAME}
}

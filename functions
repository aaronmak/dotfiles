#!/usr/bin/env zsh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

grename() {
  if [[ -z "$1" || -z "$2" ]]; then
    echo "Usage: $0 old_branch new_branch"
    return 1
  fi

  # Rename branch locally
  git branch -m "$1" "$2"
  # Rename branch in origin remote
  if git push origin :"$1"; then
    git push --set-upstream origin "$2"
  fi
}

grelease() {
  PR=$(gh pr list | grep Release | awk '{print $1}')
  read "REPLY?Merging #${PR}... Are you sure? "
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    gh pr merge $PR --merge --delete-branch=false
    echo "#${PR} merged!"
  else
    echo "Did nothing."
  fi
}

# Creates a new virtualenv if python version is given,
# and always tries to activate the virtualenv based on
# the directory name
venv() {
  PYTHON_VERSION=$1
  VENV_NAME=$(basename $PWD | tr . -)
  VIRTUALENVS_DIR=${HOME}/.virtualenvs
  VIRTUALENV_PATH=${VIRTUALENVS_DIR}/${VENV_NAME}
  PYTHON_BIN=${ASDF_DIR}/installs/python/${PYTHON_VERSION}/bin/python
  if [ ! -z "$PYTHON_VERSION" ]; then
    if [ ! -f ${PYTHON_BIN} ]; then
      echo "Python version $PYTHON_VERSION is not installed."
      return 1
    fi
    if [ ! -d ${VIRTUALENV_PATH} ]; then
      echo "Creating virtualenv ${VENV_NAME}..."
      ${PYTHON_BIN} -m venv ${VIRTUALENV_PATH}
    fi
  fi
  source ${VIRTUALENV_PATH}/bin/activate
  echo "virtualenv activated: ${VENV_NAME}"
}

venv_remove() {
  VENV_NAME=$(basename $PWD | tr . -)
  rm -rf ${HOME}/.virtualenvs/${VENV_NAME}
}

mk_neovim_venv() {
  PYTHON_VERSION=$1
  DIR=~/code/personal/neovim
  mkdir -p ${DIR}
  cd ${DIR}
  venv ${PYTHON_VERSION}
  pip install neovim
}

boop() {
  local last="$?"
  if [[ "$last" == '0' ]]; then
    say -v Fred "Yes, milord."
  else
    say -v Fred "By the gods, you're annoying!"
  fi
  $(exit "$last")
}


clone_repos() {
  mkdir -p ~/code/personal
  mkdir -p ~/code/work
  cd ~/code/personal/
  git clone git@github.com:aaronmak/dotfiles.git & \
  git clone git@github.com:aaronmak/mac-setup.git & \
  git clone git@github.com:aaronmak/snippets.git

  cd ~/code/work/
  git clone git@github.com:deliveryhero/datahub-airflow.git & \
  git clone git@github.com:deliveryhero/pd-pandata-aws-lambda.git & \
  git clone git@github.com:deliveryhero/pandata-infra.git & \
  git clone git@github.com:deliveryhero/pandata-ml-env.git & \
  git clone git@github.com:deliveryhero/pandata-pyspark.git & \
  git clone git@github.com:deliveryhero/pd-devops.git & \
  git clone git@github.com:deliveryhero/pandata-foundation-snippets.git & \
  git clone git@github.com:deliveryhero/pd-infra-terraform.git & \
  git clone git@github.com:apache/airflow.git
}
